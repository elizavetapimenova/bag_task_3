#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <windows.h>

using namespace std;

void setConsoleUTF8() {
    SetConsoleOutputCP(65001);
}

struct KnapsackResult {
    int weightUsed;
    int valueObtained;

    KnapsackResult(int weight, int value) : weightUsed(weight), valueObtained(value) {}
};

struct KnapsackItem {
    int id;           
    int value;      
    int weight;     
    double ratio;   

    KnapsackItem() : id(0), value(0), weight(0), ratio(0.0) {}
};

bool compareByRatio(const KnapsackItem& a, const KnapsackItem& b) {
    return a.ratio > b.ratio;
}

KnapsackResult solveKnapsack(int capacity, vector<KnapsackItem>& items) {
    int accumulatedWeight = 0;
    int accumulatedValue = 0;

    sort(items.begin(), items.end(), compareByRatio);

    for (const auto& item : items) {
        if (accumulatedWeight + item.weight <= capacity) {
            accumulatedValue += item.value;
            accumulatedWeight += item.weight;
        }
    }

    return KnapsackResult(accumulatedWeight, accumulatedValue);
}

int main() {
    setConsoleUTF8();

    ifstream input("../ks_200_0");
    if (!input) {
        cerr << "Ошибка при открытии файла" << endl;
        return 1;
    }

    int numberOfItems, maxWeightCapacity;
    input >> numberOfItems >> maxWeightCapacity;

    vector<KnapsackItem> items(numberOfItems);

    for (int i = 0; i < numberOfItems; ++i) {
        input >> items[i].value >> items[i].weight;
        items[i].id = i + 1;
        items[i].ratio = static_cast<double>(items[i].value) / items[i].weight;
    }

    input.close();

    KnapsackResult finalResult = solveKnapsack(maxWeightCapacity, items);

    cout << "\nОбщая ценность: " << finalResult.valueObtained << endl;
    cout << "Общий вес: " << finalResult.weightUsed << " из " << maxWeightCapacity << endl;

    return 0;
}
